# bash_select:
#       bash_select command1 : ranger navigates to the file from output of command <- expects single file as output
#       bash_select command2|fzf: command2 returns multiple, but fzf selects only one

# bash_middleware:
#       runs with the context of bashrc ???
# examples:
#       map f bash_select bash_middleware searchfilesraw|bash_middleware fzf  # chaining

###############################################################

# TODO this doesn't work on ubuntu??
# map dD shell ! gmv --backup=existing %s ~/.my-Trash/
# The Trash directory is usually ~/.local/share/Trash
map dt shell -s trash-put %s
map DD shell -p trash -v %s 2>&1
# /opt/homebrew/bin/gmv
# https://unix.stackexchange.com/questions/23873/move-with-possible-rename

# interchange q and Q
# map Q quitall
# map q quit
map <A-h> quit  # TODO

map gn fasd
map S shell bash -c "cd /bin/usr;bash;echo;ls"
map S shell bash -c "cd %d;bash"
map s shell bash
map S  console shell -w bash%space

map gta shell bash -c "git add %p"

#TODO make copyto clipboard portable
map yc shell bash -c "cat %p|clip"

map gtt shell bash -c "tig"

# TODO bind ot 's originals to something else
map ot shell bash -c "echo \"%p\";tig -- %p"
map od shell bash -c "~/my-files/my-scripts/open_explorer.sh %p"
map os shell bash -c "~/my-files/my-scripts/sublime_text.sh %p"
map oc shell bash -c "code %p"

# map oe shell bash -c "ec %p"
map oe shell bash -c "activate_emacs %p"

map ov shell bash -c "vim %p"
map ff console find%space
map fj console scout -slpit%space
map fa fzf_select
map fc fzfcd
map fs fzfsearch

map <C-f> fzf_select

# instead of M-l, using M-o
map <A-l>f bash_select cat ~/my-files/my-auto-generated-files/all_files.db|fzf
# TODO use searchfilesraw function( to avoid hardcoding of paths)
map <A-l>f bash_select bash_middleware searchfilesraw|bash_middleware fzf  # this also works
map <A-l>f bash_select CURRENT_FZF_SOURCE="echo common_locs> /tmp/script-state-var; searchfilesraw" fzflist

map <A-o>f bash_select recent_in_app
map <A-l>n bash_select bash_middleware notes_files |bash_middleware fzftv|cut -d ':' -f1
map <A-s>n bash_select bash_middleware searchnotes . |bash_middleware fzftv|cut -d ':' -f1|bash_middleware open_in_vim
map <A-s>e bash_select bash_middleware searchInRecentfiles|bash_middleware fzf|cut -d ':' -f1
map <A-s>c bash_select bash_middleware grepfilelist_common .|bash_middleware fzf|cut -d ':' -f1
# search file/ folder here
# map <A-l>F fzf_select 1 0 1
# map <A-l>f fzf_select 1 0 0

map <A-o>g bash_select recent_files |fzf
map <A-o>n bash_select snf
map <A-o>N TODO snf in vim
map <A-o>r bash_select srf



map <A-l>B fzf_select 100 0 0
map <A-l>b fzf_select 2 0 0
map B fzf_select 100 0 0
map b fzf_select 3 0 0
map fh fzf_select 1 0 0
# using a better implementation for 'b'
map b bash_select CURRENT_FZF_SOURCE="echo common_locs> /tmp/script-state-var; blistfiles" fzflist

map <A-l>r fzf_select 100 1 0
map <A-l>h fzf_select 2 1 0
# map <A-l>h console scout -slpit%space

map <A-l>g bash_select git ls-files $(git rev-parse --show-toplevel) |fzf
map <A-l>e bash_select recent_files |fzf
map <A-l>gh bash_select git ls-files | fzf --preview "echo {} | cut -f1 -d: | xargs rougify {} || cat {} || tree -C {} || tree -C {};"
map <A-l>ge bash_select git ls-files $(git rev-parse --show-toplevel) | fzf --preview "echo {} | cut -f1 -d: | xargs rougify {} || cat {} || tree -C {};"

map <A-l>1d bash_select find . -maxdepth 1| grep -v '\.git/' |fzf --preview "echo {} | cut -f1 -d: | xargs rougify {} || cat {} || tree -C {};"
map <A-l>2d bash_select find . -maxdepth 2| grep -v '\.git/' |fzf --preview "echo {} | cut -f1 -d: | xargs rougify {} || cat {} || tree -C {};"
map <A-l>3d bash_select find . -maxdepth 3| grep -v '\.git/' |fzf --preview "echo {} | cut -f1 -d: | xargs rougify {} || cat {} || tree -C {};"
map <A-l>4d bash_select find . -maxdepth 4| grep -v '\.git/' |fzf --preview "echo {} | cut -f1 -d: | xargs rougify {} || cat {} || tree -C {};"
map <A-l>5d bash_select find . -maxdepth 5| grep -v '\.git/' |fzf --preview "echo {} | cut -f1 -d: | xargs rougify {} || cat {} || tree -C {};"
map <A-l>d  bash_select find . -maxdepth 4| grep -v '\.git/' |fzf --preview "echo {} | cut -f1 -d: | xargs rougify {} || cat {} || tree -C {};"
map <A-l>D  bash_select find . -type d -maxdepth 4| grep -v '\.git/'|fzf --preview "echo {} | cut -f1 -d: | xargs rougify {} || cat {} || tree -C {};"
map <A-l>add  bash_select find . -type d -maxdepth 4| grep -v '\.git/'|fzf --preview "echo {} | cut -f1 -d: | xargs rougify {} || cat {} || tree -C {};"



map <A-s>f console shell file=`find . | fzf`  && line=`grep . -n "$file" /dev/null|fzf` && vim $(cut -d':' -f1 <<< "$line") +$(cut -d':' -f2 <<< "$line")
map <A-s>f console shell files=`find . | fzf`  && line=`echo "$files"|xargs grep . -n /dev/null|fzf` && vim $(cut -d':' -f1 <<< "$line") +$(cut -d':' -f2 <<< "$line")
map <A-s>h fzf_ag_here 0 1
map <A-s>b fzf_ag_here 0 0
map <A-s>B fzf_ag_here 1 0
map <A-s>r fzf_ag_here 1 1
# git ls-files -- "$@" | grep -vf .grepignore | xargs -d "\n" ag -S "$pattern"
map <A-s>ge bash_select git ls-files $(git rev-parse --show-toplevel) | xargs -d "\n" ag -S "r"|fzf --delimiter=: --nth=2.. --header '-------searches only in content------'
map <A-s>gh bash_select git ls-files| xargs -d "\n" ag -S "r"|fzf --delimiter=: --nth=2.. --header '-------searches only in content------'
map <A-s>s bash_select cat "%p"|fzf

map gmn console -p15 shell mkdir -p ; mv %%s $_ # move selected to a new directory (prompt)
# move selected to parent directory
map gmu console -p15 shell mv %%s ../  # move selected to parent directory (may not work for hidden files; check https://unix.stackexchange.com/a/205989)

map <C-x><C-n> console shell mkdir -p%space
map <C-c>d console shell cp -i %p %p
# " move to a bin folder for safe deletion"
# "https://github.com/ranger/ranger/issues/543 has a python implementation
# map gp console -p15 shell mkdir -p /cygdrive/c/mybin ; mv %%s $_
map gs console shell bash -c "swap_filenames %s"

# map <C-s>k eval fm.move(up=9)
# map <C-s>k eval fm.move(up=9)
map <C-k> eval fm.move(up=9)
map <C-j> eval fm.move(down=9)
map <A-j> eval fm.move(down=4)
map <A-k> eval fm.move(up=4)
#map f console -p35 shell bash -c "advgrep.sh rhere ahk %%s;bash"

map A eval fm.open_console('shell advgrep.sh rhere ' + os.path.splitext(fm.thisfile.relative_path)[1][1:] + ' ')
map A eval fm.open_console('shell advgrep.sh rhere ' + os.path.splitext(fm.thisfile.relative_path)[1][1:] + ' |vim -',prompt="Enter search command: ",position=24+len(os.path.splitext(fm.thisfile.relative_path)[1][1:]))
#set colorscheme jungle
set colorscheme solarized
#set colorscheme dotshareit
# title bar
set update_title true
set sort_directories_first false
# Set the title to "ranger" in the tmux program?
set update_tmux_title false

# Automatically count files in the directory, even before entering them?
set automatically_count_files false

set shorten_title 19
#Trim the title of the window if it gets long?  The number defines
#how many directories are displayed at once, False turns off this
#feature.

#map gd cd /cygdrive/c/Users/"$USERNAME"/Downloads
#map gd eval fm.cd(ranger.RANGERDIR)
# TODO getpass is not needed
map gdh eval import getpass,os, platform; fm.cd('/cygdrive/c/Users/' + getpass.getuser() if platform.system().startswith('CYGWIN') else os.environ["HOME"])
map gdd eval import getpass,os, platform; fm.cd('/cygdrive/c/Users/' + getpass.getuser() + '/Downloads'if platform.system().startswith('CYGWIN') else os.environ["HOME"] +'/Downloads')
map gdp eval fm.cd(os.environ["PROJECT_DIRECTORY_CURRENT"] )
map gde eval import getpass,os, platform; fm.cd('/cygdrive/c/cygwin64/home/' + getpass.getuser() if platform.system().startswith('CYGWIN') else os.environ["HOME"])

map <A-m>od eval import getpass,os, platform; fm.cd('/cygdrive/c/Users/' + getpass.getuser() + '/Downloads'if platform.system().startswith('CYGWIN') else os.environ["HOME"] +'/Downloads')

#fm.cd(subprocess.check_output(['git','rev-parse','--show-toplevel'],universal_newlines=True).strip(),stderr=subprocess.STDOUT))
# goto git root
map <A-g>r eval import subprocess; fm.cd(subprocess.check_output(['git','rev-parse','--show-toplevel'], universal_newlines=True,stderr=subprocess.STDOUT).strip())
map gdr eval import subprocess; fm.cd(subprocess.check_output(['git','rev-parse','--show-toplevel'], universal_newlines=True,stderr=subprocess.STDOUT).strip())

map gdf shell bash -c "git diff --name-only"

set preview_max_size 1000000

## Open all images in this directory when running certain image viewers
set open_all_images true

# TODO disabling for now
# map .     move_parent 1
map ,     move_parent -1
# Disable displaying line numbers in main column
set line_numbers true

# Save tabs on exit
set save_tabs_on_exit true

# Enable scroll wrapping - moving down while on the last item will wrap around to
# the top and vice versa.
set wrap_scroll true

map gl  move to=-1
#nautilus .

map <C-o>        tab_move -1
map <C-l>        tab_move 1
map e        tab_move 1
map gT        tab_move -1
map gn        tab_new ~
map gc        tab_close

# ===================================================================
# == Pager Keybindings
# ===================================================================

# Movement

pmap j pager_move  down=2
pmap k pager_move  up=2
pmap h pager_close
pmap E edit_file
pmap n chain pager_close;move down=1;display_file
pmap e chain pager_close;move_parent 1;display_file;
pmap , chain pager_close;move_parent 1;display_file;
pmap r chain pager_close;move_parent -1;display_file;
pmap . chain pager_close;move_parent -1;display_file;
pmap l chain pager_close;move up=1;display_file
pmap <C-l>  chain pager_close; tab_move 1
pmap p chain pager_close;move up=1;display_file



#If set to 'true', persistent filters would be cleared upon leaving the directory
set clear_filters_on_dir_change true


# ===================================================================
# == Local Options
# ===================================================================
# You can set local options that only affect a single directory.

# Examples:
# setlocal path='/cygdrive/c/Users/' + getpass.getuser()+'/Downloads' sort mtime
setlocal path=~ sort mtime
setlocal path=/cygdrive/c/Users/cibin/Downloads sort mtime
setlocal path=/cygdrive/c/Users/212576716/Downloads sort mtime
setlocal path=/media/sf_Downloads sort mtime
setlocal path=/media/sf_Downloads/cmla sort mtime
setlocal path=~/Downloads sort mtime

# TODO try devicons
default_linemode devicons
map <A-x><C-f> tab_new ~
# Avoid previewing files larger than this size, in bytes.  Use a value of 0 to
# disable this feature.
set preview_max_size 0

# Add the highlighted file to the path in the titlebar
set show_selection_in_titlebar true
# Set the title to "ranger" in the tmux program?
# set update_tmux_title true

# TODO make vcs aware toggleable to improve speed (enable only for certain paths https://github.com/ranger/ranger/wiki/VCS-integration)
set vcs_aware false
map zg set vcs_aware!
map ef eval import shlex; fm.run("tmux splitw -h rifle " + fm.thisfile.basename)

# Jumping around
map J     move_parent 1
map K     move_parent -1

# TODO add fasd etc
map tt bash_select CURRENT_FZF_SOURCE="echo blistfiles> /tmp/script-state-var; common_locs" fzflist
map tl bash_select CURRENT_FZF_SOURCE="echo blistfiles> /tmp/script-state-var; top_locs" fzflist

# FZM: 

# TODO can this be removed to reduce another plugin overhead
# https://github.com/laggardkernel/ranger-fzf-marks 
# :fmark <markname>, add a current dir as bookmark
# :fzm [<optional-query-keyword>], jump to a bookmark
# :dmark [<optional-query-keyword>], delete a bookmark
map tf fzm
# TODO: add fmark

map tr eval import shlex; fm.run("tree -C -d -L 3  |less;tree -C -hfL 3 |less;tree -C -d -hfL 3 |less")
map t1 eval import shlex; fm.run("tree -C -d -L 1  |less;tree -C -L 1   |less;tree -C -d -L 1|less")
map t2 eval import shlex; fm.run("tree -C -d -L 2  |less;tree -C -L 2   |less;tree -C -d -L 2|less")
map t3 eval import shlex; fm.run("tree -C -d -L 3  |less;tree -C -L 3   |less;tree -C -d -L 3|less")
map t4 eval import shlex; fm.run("tree -C -d -L 4  |less;tree -C -L 4   |less;tree -C -d -L 4|less")

# quick help
map <A-m>ht shell bash -c "cat ~/.config/ranger/rc.conf|grep map|fzf"
map <A-m>hc shell bash -c "cat ~/my-files/changelog-shortcuts.org|fzf"
map <A-m>hp shell bash -c "cat ~/my-files/popular_commands.db|fzf"
map <A-m>hot shell bash -c "cat ~/.tigrc|grep bind|fzf"
map <A-m>hov shell bash -c "cat -n ~/my-files/my_vim/my.vimrc ~/basic-settings-no-plugins.vimrc|grep remap|fzf"

map Cr eval fm.source(fm.confpath('rc-blank.conf'));fm.rifle.reload_config()

# map S shell bash -c "~/delete.sh %p"
# move_files_to_recent %p"
# map S shell bash -c "mv "$1" /home/cibin/Dropbox"

# Bookmarks
# TODO standardis across ranger, surfinkeys and emacs
map <C-x>rb<any> enter_bookmark %any
map <C-x>rm<any> set_bookmark %any
map <C-x>ru<any> unset_bookmark %any

map <C-x>rb<bg>   draw_bookmarks
copymap <C-x>rb<bg>  <C-x>rm<bg> <C-x>ru<bg>
map <C-F2> console -p12 shell echo ":${PWD}" >> ~/.fzf-marks
map <c-F2> console -p12 shell echo ":${PWD}" >> ~/.fzf-marks
map <S-F2> console -p12 shell echo ":${PWD}" >> ~/.fzf-marks
map <F2> console -p12 shell echo ":${PWD}" >> ~/.fzf-marks
map <C-x>rl cbnfzfcd

# FD
# Setting the depth to a different default, omit -d if you're fine with -d1
map <A-g>\ console fd_search -d5%space
map <alt>| fd_next
map <alt>\ fd_prev

map <alt>\ console create_std_queue
map <alt>[ fasd_next
map <alt>] fasd_prev

map Cd fzf_copy_from ~/Downloads
map CC console fzf_copy_from%space


#### archive related
# ttt is a shell wrapper by the developer
# map X shell ttt unar %f
# map U shell ttt unzip %f
# map T shell ttt tar -cvzf %f.tar.gz %s
# map Z shell ttt zip -r %f.zip %s
